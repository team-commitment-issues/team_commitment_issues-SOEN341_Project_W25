name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test All Packages
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      # Create base Jest config file
      - name: Create jest.base.js
        run: |
          cat > ChatHavenApp/jest.base.js << 'EOL'
          module.exports = {
            preset: 'ts-jest',
            transform: {
              '^.+\\.tsx?$': [
                'ts-jest',
                {
                  tsconfig: '<rootDir>/tsconfig.json'
                }
              ]
            },
            testPathIgnorePatterns: ['/node_modules/', '/dist/'],
            coveragePathIgnorePatterns: ['/node_modules/', '/dist/'],
            collectCoverage: true,
            clearMocks: true,
            testMatch: ['<rootDir>/src/**/*.test.ts', '<rootDir>/src/**/*.spec.ts', '<rootDir>/src/**/*.test.tsx', '<rootDir>/src/**/*.spec.tsx']
          };
          EOL

      # Setup environment files
      - name: Create environment files
        run: |
          # Backend .env.test file
          echo MONGO_URI=mongodb://localhost:27017/testdb > ChatHavenApp/.env.test
          echo JWT_SECRET=test-secret-key-for-development-only >> ChatHavenApp/.env.test
          echo NODE_ENV=test >> ChatHavenApp/.env.test

          # Frontend .env file (if needed)
          echo REACT_APP_API_URL=http://localhost:5000/api > ChatHavenApp/frontend/.env

      # Install dependencies
      - name: Install dependencies
        run: |
          cd ChatHavenApp
          yarn install
          yarn add -W -D whatwg-fetch identity-obj-proxy

      # Update frontend Jest config to handle ESM modules
      - name: Update frontend Jest config
        run: |
          cat > ChatHavenApp/frontend/config/jest/jest.config.js << 'EOL'
          const baseConfig = require('../../../jest.base');

          module.exports = {
            ...baseConfig,
            rootDir: '../../',
            testEnvironment: 'jsdom',
            setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
            setupFiles: ['<rootDir>/src/jest.polyfills.js'],
            transformIgnorePatterns: [
              '/node_modules/(?!(node-fetch|data-uri-to-buffer|fetch-blob|formdata-polyfill)/)'
            ],
            moduleNameMapper: {
              '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
              '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
                '<rootDir>/config/jest/fileMock.js',
              '^@/(.*)$': '<rootDir>/src/$1'
            }
          };
          EOL

      # Update the polyfills file for frontend
      - name: Update frontend polyfills
        run: |
          sed -i 's/const fetch = require(\"node-fetch\");/require(\"whatwg-fetch\");/g' ChatHavenApp/frontend/src/jest.polyfills.js
          sed -i 's/global.fetch = fetch;/global.fetch = window.fetch;/g' ChatHavenApp/frontend/src/jest.polyfills.js
          sed -i 's/global.Headers = fetch.Headers;/global.Headers = window.Headers;/g' ChatHavenApp/frontend/src/jest.polyfills.js
          sed -i 's/global.Request = fetch.Request;/global.Request = window.Request;/g' ChatHavenApp/frontend/src/jest.polyfills.js
          sed -i 's/global.Response = fetch.Response;/global.Response = window.Response;/g' ChatHavenApp/frontend/src/jest.polyfills.js

      # Update backend Jest config
      - name: Update backend Jest config
        run: |
          cat > ChatHavenApp/backend/config/jest/jest.config.js << 'EOL'
          const baseConfig = require('../../../jest.base');

          module.exports = {
            ...baseConfig,
            rootDir: '../../',
            testEnvironment: 'node',
            setupFilesAfterEnv: ['<rootDir>/config/jest/jest.setup.ts'],
            detectOpenHandles: true,
            forceExit: true
          };
          EOL

      # Update backend Jest setup to include JWT_SECRET
      - name: Update backend Jest setup
        run: |
          # Add JWT_SECRET check to jest.setup.ts (prepending to the file)
          sed -i '3i if (!process.env.JWT_SECRET) {\n  process.env.JWT_SECRET = "test-secret-key-for-development-only";\n}\n' ChatHavenApp/backend/config/jest/jest.setup.ts

      # Create a simple test file for backend if needed
      - name: Create basic backend test
        run: |
          mkdir -p ChatHavenApp/backend/src/__tests__
          cat > ChatHavenApp/backend/src/__tests__/sample.test.ts << 'EOL'
          describe('Sample Test', () => {
            it('should pass', () => {
              expect(true).toBe(true);
            });
          });
          EOL

      # Run tests using turbo
      - name: Run tests
        run: |
          cd ChatHavenApp
          yarn test

  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: |
          cd ChatHavenApp
          yarn install

      - name: Build all packages
        run: |
          cd ChatHavenApp
          yarn build
